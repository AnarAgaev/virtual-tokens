// import {type ErrorMessageOptions, generateErrorMessage} from 'zod-error'
import {create, type StateCreator} from 'zustand'
import {createJSONStorage, devtools, persist} from 'zustand/middleware'
import {formatZodErrors} from '@/helpers'
import {useConfiguration} from '@/store'
import type {T_AppSlice} from '@/types'
import {InitDataContract} from '@/zod'

const store: StateCreator<T_AppSlice> = () => ({
	requestInitData: async () => {
		try {
			const apiLink = 'mocks/dots.json'

			if (!apiLink) {
				throw new Error(
					`–ù–µ —É–∫–∞–∑–∞–Ω API URL –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–∏—Ç –¥–∞–Ω–Ω—ã—Ö. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ apiLink: ${apiLink}`,
				)
			}

			const res = await fetch(apiLink)

			if (!res.ok) {
				throw new Error(
					`–û—à–∏–±–∫–∞ fetch –∑–∞–ø—Ä–æ—Å–∞ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ! URL: ${apiLink}`,
				)
			}

			const data = await res.json()
			const safeResponse = InitDataContract.passthrough().safeParse(data)

			if (!safeResponse.success) {
				const formattedErrors = safeResponse.error.format()
				console.log(formatZodErrors(formattedErrors).join('\n'))
				throw new Error('Zod contract Error')
			}

			// Set init data
			useConfiguration.getState().setSteps(safeResponse.data.steps)
			useConfiguration.getState().setStepsCount(safeResponse.data.stepsCount)
			useConfiguration
				.getState()
				.setHardFilterSteps(safeResponse.data.hardFilterSteps)
			useConfiguration.getState().setFilters(safeResponse.data.filters)
			useConfiguration
				.getState()
				.setCharacteristics(safeResponse.data.characteristics)
			useConfiguration.getState().setBlackList(safeResponse.data.blacklists)
			useConfiguration.getState().setTitles(safeResponse.data.titles)
			useConfiguration.getState().setUnits(safeResponse.data.units)
			useConfiguration.getState().setCombos(safeResponse.data.combos)
			useConfiguration.getState().setProducts(safeResponse.data.products)

			// –°–æ–∑–¥–∞–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—é —Å —Å–µ–ª–µ–∫—Ç–∞–º–∏/–∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã
			useConfiguration.getState().createModifications()
		} catch (error) {
			console.error(error)
		}
	},
})

export const useApp = create<T_AppSlice>()(
	devtools(
		persist(store, {
			name: 'app-storage',
			storage: createJSONStorage(() => localStorage),
		}),
		{name: 'App Store'}, // üëà –¥–æ–±–∞–≤—å –∏–º—è —Å—Ç–æ—Ä–∞ —á—Ç–æ–±—ã –≤ ReduxDevTools –º–æ–∂–Ω–æ –±—ã–ª–æ –Ω–∞ –Ω–µ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è
	),
)
